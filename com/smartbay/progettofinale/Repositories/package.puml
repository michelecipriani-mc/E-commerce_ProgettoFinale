@startuml
    ' Copyright to this UML and generated images belongs to the author of the corresponding Java sources.

    ' This UML was generated by UMLDoclet (C) Copyright 2016-2025 Talsma ICT.
    ' UMLDoclet 2.2.1 is licensed under the Apache License, version 2.0
    ' and contains parts of PlantUML 1.2024.7 (ASL) Copyright 2009-2025, Arnaud Roques.

    !pragma layout smetana
    set separator ::

    package com.smartbay.progettofinale.Repositories {

        interface UserRepository [[UserRepository.html]] {
            {abstract} +findByEmail(String): User
            {abstract} +findByUsername(String): Optional<User>
        }

        interface CareerRequestRepository [[CareerRequestRepository.html]] {
            {abstract} +findByIsCheckedFalse(): List<CareerRequest>
            {abstract} +findAllUserIds(): List<Long>
            {abstract} +findByUserId(Long): List<Long>
            {abstract} +findByUserAndRoleAndIsCheckedFalse(User, Role): Optional<CareerRequest>
        }

        interface CategoryRepository [[CategoryRepository.html]]

        interface RoleRepository [[RoleRepository.html]] {
            {abstract} +findByName(String): Role
        }

        interface ImageRepository [[ImageRepository.html]] {
            {abstract} +deleteByPath(String): void
            {abstract} +findByPath(String): Optional<Image>
        }

        interface ArticleRepository [[ArticleRepository.html]] {
            {abstract} +findByCategory(Category): List<Article>
            {abstract} +findByUser(User): List<Article>
            {abstract} +findByIsAcceptedTrue(): List<Article>
            {abstract} +findByIsAcceptedFalse(): List<Article>
            {abstract} +findByIsAcceptedIsNull(): List<Article>
            {abstract} +findByIsAcceptedIsNotNull(): List<Article>
            {abstract} +search(String): List<Article>
        }

        interface OrdineRepository [[OrdineRepository.html]] {
            {abstract} +findByUser(User): List<Ordine>
            {abstract} +findByUserOrderByDataOrdineDesc(User): List<Ordine>
        }

    }

    package org.springframework.data.jpa.repository {
        interface JpaRepository<T, ID> {
            {abstract} +flush(): void
            {abstract} +saveAndFlush(S extends T): S extends T
            {abstract} +saveAllAndFlush(Iterable<S extends T>): List<S extends T>
            +--deleteInBatch--(Iterable<T>): void
            {abstract} +deleteAllInBatch(Iterable<T>): void
            {abstract} +deleteAllByIdInBatch(Iterable<ID>): void
            {abstract} +deleteAllInBatch(): void
            {abstract} +--getOne--(ID): T
            {abstract} +--getById--(ID): T
            {abstract} +getReferenceById(ID): T
            {abstract} +findAll(Example<S extends T>): List<S extends T>
            {abstract} +findAll(Example<S extends T>, Sort): List<S extends T>
        }
    }

    package org.springframework.data.repository {
        interface CrudRepository<T, ID> {
            {abstract} +save(S extends T): S extends T
            {abstract} +saveAll(Iterable<S extends T>): Iterable<S extends T>
            {abstract} +findById(ID): Optional<T>
            {abstract} +existsById(ID): boolean
            {abstract} +findAll(): Iterable<T>
            {abstract} +findAllById(Iterable<ID>): Iterable<T>
            {abstract} +count(): long
            {abstract} +deleteById(ID): void
            {abstract} +delete(T): void
            {abstract} +deleteAllById(Iterable<? extends ID>): void
            {abstract} +deleteAll(Iterable<? extends T>): void
            {abstract} +deleteAll(): void
        }
        interface ListCrudRepository<T, ID> {
            {abstract} +saveAll(Iterable<S extends T>): List<S extends T>
            {abstract} +findAll(): List<T>
            {abstract} +findAllById(Iterable<ID>): List<T>
        }
    }

    org.springframework.data.jpa.repository::JpaRepository <|-- com.smartbay.progettofinale.Repositories::UserRepository
    org.springframework.data.repository::CrudRepository <|-- com.smartbay.progettofinale.Repositories::CareerRequestRepository
    org.springframework.data.repository::ListCrudRepository <|-- com.smartbay.progettofinale.Repositories::CategoryRepository
    org.springframework.data.jpa.repository::JpaRepository <|-- com.smartbay.progettofinale.Repositories::RoleRepository
    org.springframework.data.jpa.repository::JpaRepository <|-- com.smartbay.progettofinale.Repositories::ImageRepository
    org.springframework.data.repository::ListCrudRepository <|-- com.smartbay.progettofinale.Repositories::ArticleRepository
    org.springframework.data.jpa.repository::JpaRepository <|-- com.smartbay.progettofinale.Repositories::OrdineRepository

    <style>
        footer {
            HyperLinkColor #8
            HyperLinkUnderlineThickness 0
        }
    </style>
    footer \n[[https://github.com/talsma-ict/umldoclet UMLDoclet 2.2.1]]
    ' Generated 2025-08-29T17:21:57.631355216+02:00[Europe/Rome]
@enduml
